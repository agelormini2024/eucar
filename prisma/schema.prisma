// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    //output   = "./node_modules/@prisma/client" // Ruta explícita para el cliente de Prisma
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// MODELOS

model Pais {
    id          Int         @id @default(autoincrement())
    nombre      String
    sigla       String
    provincias  Provincia[]
    clientes    Cliente[]
    propiedades Propiedad[]
}

model Provincia {
    id          Int         @id @default(autoincrement())
    nombre      String
    paisId      Int
    pais        Pais        @relation(fields: [paisId], references: [id])
    clientes    Cliente[]
    propiedades Propiedad[]
}

model Cliente {
    id                   Int         @id @default(autoincrement())
    nombre               String
    apellido             String
    razonSocial          String?
    cuit                 String      @unique
    telefono1            String?
    telefono2            String?
    celular              String
    email                String
    calle                String
    numero               Int
    piso                 String?
    departamento         String?
    paisId               Int
    pais                 Pais        @relation(fields: [paisId], references: [id])
    provinciaId          Int
    provincia            Provincia   @relation(fields: [provinciaId], references: [id])
    localidad            String
    codigoPostal         String
    observaciones        String?
    contratosInquilino   Contrato[]  @relation("ClienteInquilino")
    contratosPropietario Contrato[]  @relation("ClientePropietario")
    propiedades          Propiedad[] // Add the opposite relation field
    activo               Boolean     @default(true)
    createdAt            DateTime    @default(now())
    updatedAt            DateTime    @updatedAt
}

model TipoPropiedad {
    id          Int         @id @default(autoincrement())
    descripcion String
    propiedades Propiedad[]
}

model Propiedad {
    id              Int           @id @default(autoincrement())
    descripcion     String
    calle           String
    numero          Int
    piso            String?
    departamento    String?
    localidad       String
    provinciaId     Int
    provincia       Provincia     @relation(fields: [provinciaId], references: [id])
    paisId          Int
    pais            Pais          @relation(fields: [paisId], references: [id])
    codigoPostal    String
    ambientes       Int
    dormitorios     Int
    banios          Int
    metrosCuadrados Int
    metrosCubiertos Int
    cochera         Int
    expensas        Float?
    antiguedad      Int?
    imagen          String?
    tipoPropiedadId Int
    tipoPropiedad   TipoPropiedad @relation(fields: [tipoPropiedadId], references: [id])
    observaciones   String?
    contratos       Contrato[] // Add the opposite relation field
    clienteId       Int
    cliente         Cliente       @relation(fields: [clienteId], references: [id])
    activo          Boolean       @default(true)
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
}

//----------------------------------------------------------------------------//
// Módulo de Contratos
//----------------------------------------------------------------------------//

// Modelos para modulo de contratos

model TipoContrato {
    id                         Int        @id @default(autoincrement())
    descripcion                String
    cantidadMesesActualizacion Int        @unique
    ipc                        Float      @default(0)
    icl                        Float      @default(0)
    icp                        Float      @default(0)
    ultimaActualizacion        DateTime?
    contratos                  Contrato[] // Add the opposite relation field
}

model TipoIndice {
    id          Int        @id @default(autoincrement())
    nombre      String
    descripcion String
    contratos   Contrato[] // Add the opposite relation field
}

model Ipc {
    id         Int    @id @default(autoincrement())
    annoMes    String @unique
    porcentaje Float
}

model Icl {
    id     Int      @id @default(autoincrement())
    fecha  DateTime @unique
    indice Float
}

model Contrato {
    id                    Int          @id @default(autoincrement())
    descripcion           String
    fechaInicio           DateTime
    fechaVencimiento      DateTime
    cantidadMesesDuracion Int
    mesesRestaActualizar  Int
    diaMesVencimiento     Int
    clienteIdPropietario  Int
    clientePropietario    Cliente      @relation("ClientePropietario", fields: [clienteIdPropietario], references: [id])
    clienteIdInquilino    Int
    clienteInquilino      Cliente      @relation("ClienteInquilino", fields: [clienteIdInquilino], references: [id])
    propiedadId           Int
    propiedad             Propiedad    @relation(fields: [propiedadId], references: [id])
    tipoContratoId        Int
    tipoContrato          TipoContrato @relation(fields: [tipoContratoId], references: [id])
    tipoIndiceId          Int
    tipoIndice            TipoIndice   @relation(fields: [tipoIndiceId], references: [id])
    recibos               Recibo[]
    montoAlquilerInicial  Float
    montoAlquilerUltimo   Float?       @default(0)
    observaciones         String?
    expensas              Boolean
    abl                   Boolean
    aysa                  Boolean
    luz                   Boolean
    gas                   Boolean
    otros                 Boolean
}

// Recibos y sus items

model EstadoRecibo {
    id          Int      @id @default(autoincrement())
    descripcion String
    recibos     Recibo[]
}

model Recibo {
    id             Int          @id @default(autoincrement())
    contratoId     Int
    contrato       Contrato     @relation(fields: [contratoId], references: [id])
    estadoReciboId Int
    estadoRecibo   EstadoRecibo @relation(fields: [estadoReciboId], references: [id])
    fechaPendiente DateTime
    fechaGenerado  DateTime?
    fechaImpreso   DateTime?
    fechaAnulado   DateTime?
    montoAnterior  Float
    montoTotal     Float
    observaciones  String?
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    expensas       Boolean
    abl            Boolean
    aysa           Boolean
    luz            Boolean
    gas            Boolean
    otros          Boolean
}
