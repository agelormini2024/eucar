// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// MODELOS

model Pais {
    id          Int         @id @default(autoincrement())
    nombre      String
    sigla       String
    provincias  Provincia[]
    clientes    Cliente[]
    propiedades Propiedad[]
}

model Provincia {
    id          Int         @id @default(autoincrement())
    nombre      String
    paisId      Int
    pais        Pais        @relation(fields: [paisId], references: [id])
    clientes    Cliente[]
    propiedades Propiedad[]
}

model Cliente {
    id            Int         @id @default(autoincrement())
    nombre        String
    apellido      String
    razonSocial   String?
    cuit          String      @unique
    telefono1     String?
    telefono2     String?
    celular       String
    email         String
    calle         String
    numero        Int
    piso          String?
    departamento  String?
    paisId        Int
    pais          Pais        @relation(fields: [paisId], references: [id])
    provinciaId   Int
    provincia     Provincia   @relation(fields: [provinciaId], references: [id])
    localidad     String
    codigoPostal  String
    observaciones String?
    contratos     Contrato[] // Add the opposite relation field
    propiedades   Propiedad[] // Add the opposite relation field
    activo        Boolean     @default(true)
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
}

model RolCliente {
    id        Int        @id @default(autoincrement())
    nombre    String
    contratos Contrato[] // Add the opposite relation field
}

model TipoPropiedad {
    id          Int         @id @default(autoincrement())
    nombre      String
    propiedades Propiedad[]
}

model Propiedad {
    id              Int           @id @default(autoincrement())
    descripcion     String
    calle           String
    numero          Int
    piso            String?
    departamento    String?
    localidad       String
    provinciaId     Int
    provincia       Provincia     @relation(fields: [provinciaId], references: [id])
    paisId          Int
    pais            Pais          @relation(fields: [paisId], references: [id])
    codigoPostal    String
    ambientes       Int
    dormitorios     Int
    banios          Int
    metrosCuadrados Int
    metrosCubiertos Int
    cochera         Int
    expensas        Float?
    antiguedad      Int?
    imagen          String?
    tipoPropiedadId Int
    tipoPropiedad   TipoPropiedad @relation(fields: [tipoPropiedadId], references: [id])
    observaciones   String?
    contratos       Contrato[] // Add the opposite relation field
    clienteId       Int
    cliente         Cliente       @relation(fields: [clienteId], references: [id])
    activo          Boolean       @default(true)
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
}

//----------------------------------------------------------------------------//
// MÃ³dulo de Contratos
//----------------------------------------------------------------------------//

// Modelos para modulo de contratos

// 1) Tipo de contrato
model TipoContrato {
    id                         Int        @id @default(autoincrement())
    descripcion                String
    cantidadMesesActualizacion Int
    contratos                  Contrato[] // Add the opposite relation field
}

// 2) TipoIndice
model TipoIndice {
    id               Int               @id @default(autoincrement())
    descripcion      String
    contratos        Contrato[] // Add the opposite relation field
}

// 3) Contrato y DetalleContrato ( realizar un Master Detail )

model Contrato {
    id                    Int               @id @default(autoincrement())
    fechaInicio           DateTime
    fechaVencimiento      DateTime
    cantidadMesesDuracion Int
    diaMesVencimiento     Int
    clienteId             Int
    cliente               Cliente           @relation(fields: [clienteId], references: [id])
    rolClienteId          Int
    rolCliente            RolCliente        @relation(fields: [rolClienteId], references: [id])
    propiedadId           Int
    propiedad             Propiedad         @relation(fields: [propiedadId], references: [id])
    tipoContratoId        Int
    tipoContrato          TipoContrato      @relation(fields: [tipoContratoId], references: [id])
    tipoIndice            TipoIndice        @relation(fields: [tipoIndiceId], references: [id])
    tipoIndiceId          Int
    detalleContratos      DetalleContrato[] // Add the opposite relation field
}

model DetalleContrato {
    id             Int        @id @default(autoincrement())
    contratoId     Int
    contrato       Contrato   @relation(fields: [contratoId], references: [id])
    fecha          DateTime
    monto          Float
    indiceAplicado Float
    observaciones  String?
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt
}
